package adt;/** * * @author Chew Huai Ern referenced from sample code and modified/enhanced * @param <T> */public class ArrayStack<T> implements StackInterface<T> {    private T[] array;    private int topIndex;    private static final int DEFAULT_CAPACITY = 20;    public ArrayStack() {        this(DEFAULT_CAPACITY);    }    public ArrayStack(int initialCapacity) {        array = (T[]) new Object[initialCapacity];        topIndex = -1;    }    @Override    public void push(T entry) {        if (isFull()) {            doubleArray();        }        topIndex++;        array[topIndex] = entry;    }    @Override    public T pop() {        T result = null;        if (!isEmpty()) {            result = array[topIndex];            array[topIndex] = null;            topIndex--;        }        return result;    }    @Override    public T peek() {        T result = null;        if (!isEmpty()) {            result = array[topIndex];        }        return result;    }    @Override    public void clear() {        topIndex = -1;    }    public boolean isFull() {        return topIndex == array.length - 1;    }    @Override    public boolean isEmpty() {        return topIndex < 0;    }    public void doubleArray() {        T[] oldArray = array;        array = (T[]) new Object[oldArray.length * 2];        for (int i = 0; i < oldArray.length; i++) {            array[i] = oldArray[i];        }    }    @Override    public String toString() {        String outputStr = "";        for (int index = 0; index <= topIndex; index++) {            outputStr += array[index] + "\n";        }        return outputStr;    }}